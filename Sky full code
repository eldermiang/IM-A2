Flock flock;
Table xy;
int index = 1;

//Buttons
int BlueX, BlueY;      // Position of blue button
int RedX, RedY;  // Position of red button
int GreenX, GreenY; // pos of green

int BtnSize = 30;     // Diameter of button


color BlueColor, RedColor, GreenColor, baseColor;
color BlueHighlight, RedHighlight, GreenHighlight;
color currentColor;

boolean BlueOver = false;
boolean RedOver = false;
boolean GreenOver = false;

int Cloud1 = (int)random(-100, 1300);
int Cloud2 = (int)random(-100, 1300);
int Cloud3 = (int)random(-100, 1300);


void setup() {
  size(1024, 720);
  //background(255);
 xy = loadTable("http://eif-research.feit.uts.edu.au/api/csv/?rFromDate=2020-09-01T13%3A23%3A28&rToDate=2020-09-16T13%3A23%3A28&rFamily=people&rSensor=+PC00.05+%28In%29", "csv");
  flock = new Flock();
  // Add an initial set of boids into the system
  for (int i = 0; i < xy.getInt(0, 1); i++) {
    flock.addBoid(new Boid(width/2,height/2));
  }
  
  //color of blu
  BlueColor = color(100, 200, 255);
  BlueHighlight = color(130, 230, 255);
  //color of red
  RedColor = color(255, 65, 80);
  RedHighlight = color(255, 95, 110);
  //green
  GreenColor = color(0, 170, 70);
  GreenHighlight = color(155, 255, 170);
  
  baseColor = color(100);
  currentColor = baseColor;
  RedX = 950;
  RedY = 50;
  BlueX = 900;
  BlueY = 50;
  GreenX = 850;
  GreenY = 50;
  ellipseMode(CENTER);
}

void draw() {
  background(215, 235, 255);
  noStroke();
  //clouds
  int ra = int(random(1700, 2500)); //end point reset
 int ra1 = int(random(1, 1.6)); //speed 1
  int ra2 = int(random(1.5, 2.0)); //speed 2
  int ra3 = int(random(1.4, 2.1)); //speed 3
  
  fill(255, 255, 255, 50); //cloud colour
  ellipse(Cloud1, 140, 970, 900);
  Cloud1 = Cloud1 + ra1;
  if (Cloud1 > ra) {
   Cloud1 = -600; 
  }
  ellipse(Cloud1+40, 190, 660, 410);
  Cloud1 = Cloud1 + ra2;
  if (Cloud1 > ra) {
   Cloud1 = -400; 
  }
 ellipse(Cloud2, 310, 760, 900);
  Cloud2 = Cloud2 - ra3;
  if (Cloud3 < -700) {
   Cloud3 = 1500; 
  }
  
  ellipse(Cloud2-300, 370, 900, 400);
  Cloud2 = Cloud2 - ra1/2;
  if (Cloud2 < -900) {
   Cloud2 = 1700; 
  }
  ellipse(Cloud3, 660, 330, 520);
  Cloud3 = Cloud3 + ra3/2;
  if (Cloud3 > ra) {
   Cloud3 = -420; 
  }
  
  ellipse(Cloud3-200, 570, 770, 380);
  Cloud3 = Cloud3 + ra2/2;
  if (Cloud3 > ra) {
   Cloud3 = -300; 
  }
  
  fill(55);
  textSize(24);
  text("Bird Colour", 840, 30);
  
  //date
  flock.run();
  fill(0);
  textSize(32);
text("People:" + getPeople(), 10, 30);
  
int d = day();    // Values from 1 - 31
int m = month();  // Values from 1 - 12
int y = year();   // 2003, 2004, 2005, etc.

String s = String.valueOf(d);
text("Date: " + s + "-", 250, 30);
s = String.valueOf(m);
text(s + "-", 400, 30); 
s = String.valueOf(y);
text(s, 440, 30);

//buttons
update(mouseX, mouseY);
 // background(currentColor);
  
  if (BlueOver) {
    fill(BlueHighlight);
  } else {
    fill(BlueColor);
  }
  stroke(255);
  ellipse(BlueX, BlueY, BtnSize, BtnSize);
  
  if (RedOver) {
    fill(RedHighlight);
  } else {
    fill(RedColor);
  }
  stroke(255);
  ellipse(RedX, RedY, BtnSize, BtnSize);
  
   if (GreenOver) {
    fill(GreenHighlight);
  } else {
    fill(GreenColor);
  }
  stroke(255);
  ellipse(GreenX, GreenY, BtnSize, BtnSize);



}
void update(int x, int y) {
  if ( overCircle(RedX, RedY, BtnSize) ) {
    RedOver = true;
    BlueOver = false;
    GreenOver = false;
  } else if ( overCircle(BlueX, BlueY, BtnSize) ) {
    BlueOver = true;
    RedOver = false;
    GreenOver = false;
     } else if ( overCircle(GreenX, GreenY, BtnSize) ) {
    GreenOver = true;
    BlueOver = false;
    RedOver = false;
  } else {
    RedOver = BlueOver = GreenOver = false;
  }
}



void mousePressed() {
  if (RedOver) {
    currentColor = RedColor;
  }
  if (BlueOver) {
    currentColor = BlueColor;
  }
  if (GreenOver) {
    currentColor = GreenColor;
  }
}

boolean overRect(int x, int y, int width, int height)  {
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
  } else {
    return false;
  }
}

boolean overCircle(int x, int y, int diameter) {
  float disX = x - mouseX;
  float disY = y - mouseY;
  if (sqrt(sq(disX) + sq(disY)) < diameter/2 ) {
    return true;
  } else {
    return false;
  }
}




// The Boid class

class Boid {

  PVector position;
  PVector velocity;
  PVector acceleration;
  float r;
  float maxforce;    // Maximum steering force
  float maxspeed;    // Maximum speed

    Boid(float x, float y) {
    acceleration = new PVector(0, 0);

    // This is a new PVector method not yet implemented in JS
    // velocity = PVector.random2D();

    // Leaving the code temporarily this way so that this example runs in JS
    float angle = random(TWO_PI);
    velocity = new PVector(cos(angle), sin(angle));

    position = new PVector(x, y);
    r = 0.4;
    maxspeed = 2;
    maxforce = 0.03;
  }

  void run(ArrayList<Boid> boids) {
    flock(boids);
    update();
    borders();
    render();
  }

  void applyForce(PVector force) {
    // We could add mass here if we want A = F / M
    acceleration.add(force);
  }

  // We accumulate a new acceleration each time based on three rules
  void flock(ArrayList<Boid> boids) {
    PVector sep = separate(boids);   // Separation
    PVector ali = align(boids);      // Alignment
    PVector coh = cohesion(boids);   // Cohesion
    // Arbitrarily weight these forces
    sep.mult(1.5);
    ali.mult(1.0);
    coh.mult(1.0);
    // Add the force vectors to acceleration
    applyForce(sep);
    applyForce(ali);
    applyForce(coh);
  }

  // Method to update position
  void update() {
    // Update velocity
    velocity.add(acceleration);
    // Limit speed
    velocity.limit(maxspeed);
    position.add(velocity);
    // Reset accelertion to 0 each cycle
    acceleration.mult(0);
  }

  // A method that calculates and applies a steering force towards a target
  // STEER = DESIRED MINUS VELOCITY
  PVector seek(PVector target) {
    PVector desired = PVector.sub(target, position);  // A vector pointing from the position to the target
    // Scale to maximum speed
    desired.normalize();
    desired.mult(maxspeed);

    // Above two lines of code below could be condensed with new PVector setMag() method
    // Not using this method until Processing.js catches up
    // desired.setMag(maxspeed);

    // Steering = Desired minus Velocity
    PVector steer = PVector.sub(desired, velocity);
    steer.limit(maxforce);  // Limit to maximum steering force
    return steer;
  }

  void render() {
    // Draw a triangle rotated in the direction of velocity
    float theta = velocity.heading2D() + radians(90);
    // heading2D() above is now heading() but leaving old syntax until Processing.js catches up
    
    fill(currentColor);
    noStroke();
    pushMatrix();
    translate(position.x, position.y);
    rotate(theta);
   
   
   
    beginShape();
  
  vertex(50*r, 10*r);
  
  vertex(45*r, 20*r);
  vertex(20*r, 15*r);
  vertex(10*r, 20*r);
  vertex(35*r, 35*r);
  vertex(45*r, 30*r);
  vertex(40*r, 45*r);
  
  vertex(50*r, 50*r);
  
  vertex(60*r, 45*r);
  vertex(55*r, 30*r);
  vertex(65*r, 35*r);
  vertex(90*r, 20*r);
  vertex(80*r, 15*r);
  vertex(55*r, 20*r);
  
    endShape(CLOSE);
    popMatrix();
  }

  // Wraparound
  void borders() {
    if (position.x < -r) position.x = width+r;
    if (position.y < -r) position.y = height+r;
    if (position.x > width+r) position.x = -r;
    if (position.y > height+r) position.y = -r;
  }

  // Separation
  // Method checks for nearby boids and steers away
  PVector separate (ArrayList<Boid> boids) {
    float desiredseparation = 25.0f;
    PVector steer = new PVector(0, 0, 0);
    int count = 0;
    // For every boid in the system, check if it's too close
    for (Boid other : boids) {
      float d = PVector.dist(position, other.position);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((d > 0) && (d < desiredseparation)) {
        // Calculate vector pointing away from neighbor
        PVector diff = PVector.sub(position, other.position);
        diff.normalize();
        diff.div(d);        // Weight by distance
        steer.add(diff);
        count++;            // Keep track of how many
      }
    }
    // Average -- divide by how many
    if (count > 0) {
      steer.div((float)count);
    }

    // As long as the vector is greater than 0
    if (steer.mag() > 0) {
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // steer.setMag(maxspeed);

      // Implement Reynolds: Steering = Desired - Velocity
      steer.normalize();
      steer.mult(maxspeed);
      steer.sub(velocity);
      steer.limit(maxforce);
    }
    return steer;
  }

  // Alignment
  // For every nearby boid in the system, calculate the average velocity
  PVector align (ArrayList<Boid> boids) {
    float neighbordist = 50;
    PVector sum = new PVector(0, 0);
    int count = 0;
    for (Boid other : boids) {
      float d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.velocity);
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      // First two lines of code below could be condensed with new PVector setMag() method
      // Not using this method until Processing.js catches up
      // sum.setMag(maxspeed);

      // Implement Reynolds: Steering = Desired - Velocity
      sum.normalize();
      sum.mult(maxspeed);
      PVector steer = PVector.sub(sum, velocity);
      steer.limit(maxforce);
      return steer;
    } 
    else {
      return new PVector(0, 0);
    }
  }

  // Cohesion
  // For the average position (i.e. center) of all nearby boids, calculate steering vector towards that position
  PVector cohesion (ArrayList<Boid> boids) {
    float neighbordist = 50;
    PVector sum = new PVector(0, 0);   // Start with empty vector to accumulate all positions
    int count = 0;
    for (Boid other : boids) {
      float d = PVector.dist(position, other.position);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.position); // Add position
        count++;
      }
    }
    if (count > 0) {
      sum.div(count);
      return seek(sum);  // Steer towards the position
    } 
    else {
      return new PVector(0, 0);
    }
  }
}

int getPeople() {
  int people = 0;
  for (int r = 0; r < xy.getRowCount(); r++) {
    for (int c = 0; c < xy.getColumnCount(); c++) {
      people += xy.getInt(r, c);
    }
  }
  return people;
}







// The Flock (a list of Boid objects)

class Flock {
  ArrayList<Boid> boids; // An ArrayList for all the boids

  Flock() {
    boids = new ArrayList<Boid>(); // Initialize the ArrayList
  }

  void run() {
    for (Boid b : boids) {
      b.run(boids);  // Passing the entire list of boids to each boid individually
    }
  }

  void addBoid(Boid b) {
    boids.add(b);
  }

}
